#authors: ranja.sarkar@shell.com, bartlomiej.fatyga@shell.com
#RUN THIS CODE FOR CONTOUR PLOTS (python-enabled PBI)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import copy
from typing import Tuple
#from IPython import get_ipython


#dataset = pd.DataFrame(Concentration (vol%), Temperature (C), Resistance, Polymer, Trade name, Exposure medium, Report name)
#dataset = dataset.drop_duplicates()

#Qualitative Compatibility Data
#n = len(dataset)

#pol = dataset['Polymer'].values
poly = dataset['Polymer'].unique()
#trade = dataset['Trade name'].values

exp = dataset['Exposure medium']
esource = exp.unique()
#exp_med = exp.values

name = dataset['Report name']
source = name.unique()

#if n == 1 and len(poly) == 1 and len(esource) == 1:
       
def pivoting(df: pd.DataFrame) -> pd.DataFrame:
    """
    Pivoting function to reshape DataFrame with columns
    ['Temperature', 'Concentration', 'Resistance'] 
    from long to wide format.
    Args:
        df (pd.DataFrame): Given DataFrame in long format.
    Returns:
        pd.DataFrame: Final DataFrame in wide format, NANs filled with zeros
                      and index sorted.
    """
    df2 = (df.pivot('Temperature (C)', 'Concentration (vol%)', 'Resistance')
             .reindex(sorted(set(df['Concentration (vol%)'])), axis=1)
             .fillna(0)
             .astype(int)
             .sort_index(axis=0, ascending=False))
    return df2

def check_matrix(mat: np.array, conc: list, temp: list) -> Tuple[np.array, list, list]:
    """
    The function checks if the given matrix (nxm) has dimension 1xm or nx1. If so, it adds one column or row 
    filled with zeros respectively. It also makes sure that values are added to the concentration and temperature lists.
    Args:
        mat (np.array): Given matrix.
        conc (list): List of given concentrations.
        temp (list): List of given temperatures.
    Returns:
        Tuple[np.array, list, list]: Three variable (final matrix, list of concs, list of temps)
    """
    final_mat = copy.deepcopy(mat)
    if final_mat.shape[0] == 1:
        temp[len(temp)] = 0
        new_mat = np.zeros(mat.shape[1])
        final_mat = np.vstack([final_mat, new_mat])
    if final_mat.shape[1] == 1:
        conc[len(conc)] = 0
        new_mat = np.zeros(final_mat.shape[0]).reshape(-1, 1)
        final_mat = np.hstack([new_mat, final_mat])
    return final_mat, conc, temp

def prepare_matrix(mat: np.array) -> np.array:
    """Function that fills zeros in given matrix if:
    1. There is a higher value (to the right) in the row with zero checked.
    2. There is a higher value (above) in the column with zero checked.
    If both conditions are met, the higher value is chosen.
    Args:
        mat (np.array): Given matrix with zeros.
    Returns:
        np.array: Final matrix with some zeros filled.
    """
    mat_final = copy.deepcopy(mat)
    zero_indices = np.where(mat_final == 0)
    for i, j in zip(zero_indices[0], zero_indices[1]):
        if (max(mat_final[i, j:]) > mat_final[i, j]) and (max(mat_final[i, j:]) > max(mat_final[:i+1, j])):
            mat_final[i, j] = max(mat_final[i, j:])
        elif max(mat_final[:i+1, j]) > mat_final[i, j]:
            mat_final[i, j] = max(mat_final[:i+1, j])
    return mat_final

# Plotting function
def plot(mat, conc, temp):
    levels = np.linspace(0, 10)
    img = plt.contourf(mat, extent = [min(conc), max(conc), max(temp), min(temp)], levels = levels, cmap = 'RdYlGn')
    #plt.grid()
    bounds = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    #pylab.colorbar(ticks = bounds)
    plt.colorbar(img, ticks = bounds, label = 'Chemical Resistance')
    #plt.clim(0,10)
    plt.xlabel('Concentration (vol%)', fontsize = 12.0)
    plt.ylabel('Temperature (C)', fontsize = 12.0)

if len(source) == 1 and len(poly) == 1 and len(esource) == 1:
    df = dataset
    df2 = pivoting(df)
    conc = dataset['Concentration (vol%)']
    temp = dataset['Temperature (C)']
    mat = df2.to_numpy()
    mat, conc, temp = check_matrix(mat, conc, temp)
    mat = prepare_matrix(mat)
    plot(mat, conc, temp)
    plt.show()

else:
    plt.figure()
    plt.show()


